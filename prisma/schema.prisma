// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE_NAME {
  USER
  ADMIN
}

model Auth {
  id                   String    @id @unique
  email                String    @unique
  password             String
  salt                 String
  userName             String    @map("user_name")
  passwordResetToken   String?   @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  otpCode              String    @map("otp_code")
  saltOtp              String    @map("salt_otp")
  otpExpiration        DateTime? @map("otp_expiration")
  isVerifiedOtp        Boolean   @default(false) @map("is_verified_otp")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  //relationships
  user                 User?

  @@map("app_auths")
}

model User {
  userId        String     @id @unique @map("user_id")
  avatarImage   String?    @map("avatar_image")
  weight        Int?
  height        Int?
  goals         String[]   @default([])
  activityLevel String?    @map("activity_level")
  gender        String?
  age           Int?
  birthDate     DateTime?  @map("birth_date")
  phoneNumber   String?    @map("phone_number")
  nationality   String?
  isOnboarded   Boolean    @default(false) @map("is_onboarded")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  auth          Auth       @relation(fields: [userId], references: [id], onDelete: Cascade)
  //relatonships
  UserRole      UserRole[]
  Workout       Workout[]

  @@map("app_users")
}

model Exercise {
  id               String            @id
  name             String
  bodyPart         String            @map("body_part")
  target           String
  equipment        String
  gifUrl           String            @map("gif_url")
  image            String?
  secondaryMuscles String[]          @map("secondary_muscles")
  instructions     String[]
  WorkoutExercise  WorkoutExercise[]

  @@map("fitness_exercises")
}

model Workout {
  id                 String            @id @default(uuid())
  userId             String
  name               String
  musclesGroupTarget String[]          @map("muscles_group_target")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  user               User              @relation(fields: [userId], references: [userId], onDelete: Cascade)
  exercises          WorkoutExercise[]

  @@map("user_workout")
}

model WorkoutExercise {
  id         String       @id @default(uuid())
  workoutId  String       @map("workout_id")
  exerciseId String       @map("exercise_id")
  workout    Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  set        WorkoutSet[]

  @@map("workout_exercises")
}

model WorkoutSet {
  id                String          @id @default(uuid())
  workoutExerciseId String          @map("workout_exercise_id")
  weight            Int
  reps              Int
  WorkoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@map("workout_sets")
}

model Role {
  id   String    @id
  name ROLE_NAME @unique

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  //relationships
  users          UserRole[]
  RolePermission RolePermission[]

  @@map("roles")
}

model Permission {
  id          String           @id
  name        String           @unique
  description String?
  //relationships
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(uuid())
  userId String @map("user_id")
  roleId String @map("role_id")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String  @id @default(uuid())
  roleId       String  @map("role_id")
  permissionId String  @map("permission_id")
  value        Boolean

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}
